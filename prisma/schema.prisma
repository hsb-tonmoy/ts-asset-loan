datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String    @id @default(cuid()) @unique
  email       String    @unique
  firstName        String?
  lastName         String?
  role             String? @default("staff")
  username         String? @unique

  auth_session Session[]
  key          Key[]
  requestsMade     Request[] @relation("requestsMade")
  requestsAssigned Request[] @relation("requestsAssigned")
  requestsApproved Request[] @relation("requestsApproved")
  assetsCheckedOut AssetCheckout[] @relation("checkedOutByUser")
  assetsCheckoutApproved   AssetCheckout[] @relation("approvedByUser")

}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Request {
  id             Int     @id @default(autoincrement()) @unique
  user_id        String?
  user           User?   @relation(fields: [user_id], references: [id], name: "requestsMade")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt @default(now())
  status_id      Int
  status         RequestStatus @relation(fields: [status_id], references: [id])
  requestedCategories String?
  firstName     String
  lastName      String
  email         String
  phone         String
  requestDateTime   DateTime
  returnDateTime    DateTime
  notes        String?
  assigned_to_user_id   String?
  assigned_to_user      User?   @relation(fields: [assigned_to_user_id], references: [id], name: "requestsAssigned")
  approved_by_user_id   String?
  approved_by_user      User?   @relation(fields: [approved_by_user_id], references: [id], name: "requestsApproved")
  assets       AssetCheckout[]
}

model Asset {
  id          Int     @id @default(autoincrement()) @unique
  name        String
  asset_tag  String  @unique
  status_id   Int
  status      AssetStatus @relation(fields: [status_id], references: [id])
  serial     String? @unique
  model      String?
  location   String?
  purchase_cost Float?
  mac_address String?
  imei        String?
  image       String?
  description String?
  category_id Int
  category  AssetCategory @relation(fields: [category_id], references: [id])
  checkout    AssetCheckout[]

}

model AssetCheckout {
  id          Int     @id @default(autoincrement()) @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())
  asset_id    Int
  asset       Asset   @relation(fields: [asset_id], references: [id])
  user_id     String
  user        User    @relation(fields: [user_id], references: [id], name: "checkedOutByUser")
  request_id  Int
  request     Request @relation(fields: [request_id], references: [id])
  checkout_date DateTime? @default(now())
  checkin_date  DateTime?
  approved_by_user_id String?
  approved_by_user    User?   @relation(fields: [approved_by_user_id], references: [id], name: "approvedByUser")
  notes        String?

}

model AssetCategory {
  id          Int     @id @default(autoincrement()) @unique
  name        String  @unique
  image       String?
  description String?
  assets      Asset[]
}

model AssetStatus {
  id          Int     @id @default(autoincrement()) @unique
  name        String  @unique
  statusColor String? @default("rgb(235, 64, 52)")
  description String?
  assets      Asset[]
}

model RequestStatus {
  id          Int     @id @default(autoincrement()) @unique
  name        String  @unique
  statusColor String? @default("rgb(235, 64, 52)")
  description String?
  requests   Request[]
}

model SiteSettings {
  id          Int     @id @default(autoincrement()) @unique
  site_name    String? @default("Kalamazoo Public Library Asset Tracker")
  site_description String?
  maintenance_mode       Boolean? @default(false)
  setup      Boolean? @default(false)
  admin_email String?
  default_assignto_user_email String?
}